// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gateway/v1/gateway.proto

package gatewayv1connect

import (
	context "context"
	errors "errors"
	v1 "gateway/gen/gateway/v1"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GatewayServiceName is the fully-qualified name of the GatewayService service.
	GatewayServiceName = "gateway.v1.GatewayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GatewayServiceHealthCheckProcedure is the fully-qualified name of the GatewayService's
	// HealthCheck RPC.
	GatewayServiceHealthCheckProcedure = "/gateway.v1.GatewayService/HealthCheck"
	// GatewayServiceRegisterAgentProcedure is the fully-qualified name of the GatewayService's
	// RegisterAgent RPC.
	GatewayServiceRegisterAgentProcedure = "/gateway.v1.GatewayService/RegisterAgent"
	// GatewayServiceAgentHeartbeatProcedure is the fully-qualified name of the GatewayService's
	// AgentHeartbeat RPC.
	GatewayServiceAgentHeartbeatProcedure = "/gateway.v1.GatewayService/AgentHeartbeat"
	// GatewayServicePowerOnProcedure is the fully-qualified name of the GatewayService's PowerOn RPC.
	GatewayServicePowerOnProcedure = "/gateway.v1.GatewayService/PowerOn"
	// GatewayServicePowerOffProcedure is the fully-qualified name of the GatewayService's PowerOff RPC.
	GatewayServicePowerOffProcedure = "/gateway.v1.GatewayService/PowerOff"
	// GatewayServicePowerCycleProcedure is the fully-qualified name of the GatewayService's PowerCycle
	// RPC.
	GatewayServicePowerCycleProcedure = "/gateway.v1.GatewayService/PowerCycle"
	// GatewayServiceResetProcedure is the fully-qualified name of the GatewayService's Reset RPC.
	GatewayServiceResetProcedure = "/gateway.v1.GatewayService/Reset"
	// GatewayServiceGetPowerStatusProcedure is the fully-qualified name of the GatewayService's
	// GetPowerStatus RPC.
	GatewayServiceGetPowerStatusProcedure = "/gateway.v1.GatewayService/GetPowerStatus"
	// GatewayServiceCreateVNCSessionProcedure is the fully-qualified name of the GatewayService's
	// CreateVNCSession RPC.
	GatewayServiceCreateVNCSessionProcedure = "/gateway.v1.GatewayService/CreateVNCSession"
	// GatewayServiceGetVNCSessionProcedure is the fully-qualified name of the GatewayService's
	// GetVNCSession RPC.
	GatewayServiceGetVNCSessionProcedure = "/gateway.v1.GatewayService/GetVNCSession"
	// GatewayServiceCloseVNCSessionProcedure is the fully-qualified name of the GatewayService's
	// CloseVNCSession RPC.
	GatewayServiceCloseVNCSessionProcedure = "/gateway.v1.GatewayService/CloseVNCSession"
	// GatewayServiceStartVNCProxyProcedure is the fully-qualified name of the GatewayService's
	// StartVNCProxy RPC.
	GatewayServiceStartVNCProxyProcedure = "/gateway.v1.GatewayService/StartVNCProxy"
	// GatewayServiceCreateSOLSessionProcedure is the fully-qualified name of the GatewayService's
	// CreateSOLSession RPC.
	GatewayServiceCreateSOLSessionProcedure = "/gateway.v1.GatewayService/CreateSOLSession"
	// GatewayServiceGetSOLSessionProcedure is the fully-qualified name of the GatewayService's
	// GetSOLSession RPC.
	GatewayServiceGetSOLSessionProcedure = "/gateway.v1.GatewayService/GetSOLSession"
	// GatewayServiceCloseSOLSessionProcedure is the fully-qualified name of the GatewayService's
	// CloseSOLSession RPC.
	GatewayServiceCloseSOLSessionProcedure = "/gateway.v1.GatewayService/CloseSOLSession"
	// GatewayServiceStreamVNCDataProcedure is the fully-qualified name of the GatewayService's
	// StreamVNCData RPC.
	GatewayServiceStreamVNCDataProcedure = "/gateway.v1.GatewayService/StreamVNCData"
	// GatewayServiceStreamConsoleDataProcedure is the fully-qualified name of the GatewayService's
	// StreamConsoleData RPC.
	GatewayServiceStreamConsoleDataProcedure = "/gateway.v1.GatewayService/StreamConsoleData"
	// GatewayServiceGetBMCInfoProcedure is the fully-qualified name of the GatewayService's GetBMCInfo
	// RPC.
	GatewayServiceGetBMCInfoProcedure = "/gateway.v1.GatewayService/GetBMCInfo"
)

// GatewayServiceClient is a client for the gateway.v1.GatewayService service.
type GatewayServiceClient interface {
	// Health check endpoint for monitoring and load balancer health probes
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// RegisterAgent allows a Local Agent to register itself and announce available servers
	// This establishes the initial connection and server inventory
	RegisterAgent(context.Context, *connect.Request[v1.RegisterAgentRequest]) (*connect.Response[v1.RegisterAgentResponse], error)
	// AgentHeartbeat maintains the agent connection and provides server status updates
	// Agents send periodic heartbeats to keep the connection alive and update server state
	AgentHeartbeat(context.Context, *connect.Request[v1.AgentHeartbeatRequest]) (*connect.Response[v1.AgentHeartbeatResponse], error)
	// PowerOn sends power-on command to the server's BMC
	PowerOn(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error)
	// PowerOff sends graceful or forced power-off command to the server's BMC
	PowerOff(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error)
	// PowerCycle performs a power cycle (off then on) operation
	PowerCycle(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error)
	// Reset performs a hard reset of the server (equivalent to reset button)
	Reset(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error)
	// GetPowerStatus queries the current power state of the server
	GetPowerStatus(context.Context, *connect.Request[v1.PowerStatusRequest]) (*connect.Response[v1.PowerStatusResponse], error)
	// CreateVNCSession creates a VNC console session for remote access
	CreateVNCSession(context.Context, *connect.Request[v1.CreateVNCSessionRequest]) (*connect.Response[v1.CreateVNCSessionResponse], error)
	// GetVNCSession retrieves information about an existing VNC session
	GetVNCSession(context.Context, *connect.Request[v1.GetVNCSessionRequest]) (*connect.Response[v1.GetVNCSessionResponse], error)
	// CloseVNCSession terminates an active VNC session
	CloseVNCSession(context.Context, *connect.Request[v1.CloseVNCSessionRequest]) (*connect.Response[v1.CloseVNCSessionResponse], error)
	// StartVNCProxy requests an agent to start a VNC proxy for a specific BMC
	StartVNCProxy(context.Context, *connect.Request[v1.StartVNCProxyRequest]) (*connect.Response[v1.StartVNCProxyResponse], error)
	// CreateSOLSession creates a SOL console session for serial terminal access
	CreateSOLSession(context.Context, *connect.Request[v1.CreateSOLSessionRequest]) (*connect.Response[v1.CreateSOLSessionResponse], error)
	// GetSOLSession retrieves information about an existing SOL session
	GetSOLSession(context.Context, *connect.Request[v1.GetSOLSessionRequest]) (*connect.Response[v1.GetSOLSessionResponse], error)
	// CloseSOLSession terminates an active SOL session
	CloseSOLSession(context.Context, *connect.Request[v1.CloseSOLSessionRequest]) (*connect.Response[v1.CloseSOLSessionResponse], error)
	// Streaming RPC for VNC data (Gateway <-> Agent bidirectional streaming)
	// Gateway initiates this stream to agent, then bidirectionally streams VNC data
	StreamVNCData(context.Context) *connect.BidiStreamForClient[v1.VNCDataChunk, v1.VNCDataChunk]
	// Streaming RPC for SOL/Console data (Gateway <-> Agent bidirectional streaming)
	// Gateway initiates this stream to agent, then bidirectionally streams console data
	StreamConsoleData(context.Context) *connect.BidiStreamForClient[v1.ConsoleDataChunk, v1.ConsoleDataChunk]
	// GetBMCInfo retrieves detailed hardware information from the BMC
	// This returns firmware version, manufacturer details, and capabilities
	GetBMCInfo(context.Context, *connect.Request[v1.GetBMCInfoRequest]) (*connect.Response[v1.GetBMCInfoResponse], error)
}

// NewGatewayServiceClient constructs a client for the gateway.v1.GatewayService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGatewayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gatewayServiceMethods := v1.File_gateway_v1_gateway_proto.Services().ByName("GatewayService").Methods()
	return &gatewayServiceClient{
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+GatewayServiceHealthCheckProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
		registerAgent: connect.NewClient[v1.RegisterAgentRequest, v1.RegisterAgentResponse](
			httpClient,
			baseURL+GatewayServiceRegisterAgentProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("RegisterAgent")),
			connect.WithClientOptions(opts...),
		),
		agentHeartbeat: connect.NewClient[v1.AgentHeartbeatRequest, v1.AgentHeartbeatResponse](
			httpClient,
			baseURL+GatewayServiceAgentHeartbeatProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("AgentHeartbeat")),
			connect.WithClientOptions(opts...),
		),
		powerOn: connect.NewClient[v1.PowerOperationRequest, v1.PowerOperationResponse](
			httpClient,
			baseURL+GatewayServicePowerOnProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("PowerOn")),
			connect.WithClientOptions(opts...),
		),
		powerOff: connect.NewClient[v1.PowerOperationRequest, v1.PowerOperationResponse](
			httpClient,
			baseURL+GatewayServicePowerOffProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("PowerOff")),
			connect.WithClientOptions(opts...),
		),
		powerCycle: connect.NewClient[v1.PowerOperationRequest, v1.PowerOperationResponse](
			httpClient,
			baseURL+GatewayServicePowerCycleProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("PowerCycle")),
			connect.WithClientOptions(opts...),
		),
		reset: connect.NewClient[v1.PowerOperationRequest, v1.PowerOperationResponse](
			httpClient,
			baseURL+GatewayServiceResetProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("Reset")),
			connect.WithClientOptions(opts...),
		),
		getPowerStatus: connect.NewClient[v1.PowerStatusRequest, v1.PowerStatusResponse](
			httpClient,
			baseURL+GatewayServiceGetPowerStatusProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("GetPowerStatus")),
			connect.WithClientOptions(opts...),
		),
		createVNCSession: connect.NewClient[v1.CreateVNCSessionRequest, v1.CreateVNCSessionResponse](
			httpClient,
			baseURL+GatewayServiceCreateVNCSessionProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("CreateVNCSession")),
			connect.WithClientOptions(opts...),
		),
		getVNCSession: connect.NewClient[v1.GetVNCSessionRequest, v1.GetVNCSessionResponse](
			httpClient,
			baseURL+GatewayServiceGetVNCSessionProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("GetVNCSession")),
			connect.WithClientOptions(opts...),
		),
		closeVNCSession: connect.NewClient[v1.CloseVNCSessionRequest, v1.CloseVNCSessionResponse](
			httpClient,
			baseURL+GatewayServiceCloseVNCSessionProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("CloseVNCSession")),
			connect.WithClientOptions(opts...),
		),
		startVNCProxy: connect.NewClient[v1.StartVNCProxyRequest, v1.StartVNCProxyResponse](
			httpClient,
			baseURL+GatewayServiceStartVNCProxyProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("StartVNCProxy")),
			connect.WithClientOptions(opts...),
		),
		createSOLSession: connect.NewClient[v1.CreateSOLSessionRequest, v1.CreateSOLSessionResponse](
			httpClient,
			baseURL+GatewayServiceCreateSOLSessionProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("CreateSOLSession")),
			connect.WithClientOptions(opts...),
		),
		getSOLSession: connect.NewClient[v1.GetSOLSessionRequest, v1.GetSOLSessionResponse](
			httpClient,
			baseURL+GatewayServiceGetSOLSessionProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("GetSOLSession")),
			connect.WithClientOptions(opts...),
		),
		closeSOLSession: connect.NewClient[v1.CloseSOLSessionRequest, v1.CloseSOLSessionResponse](
			httpClient,
			baseURL+GatewayServiceCloseSOLSessionProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("CloseSOLSession")),
			connect.WithClientOptions(opts...),
		),
		streamVNCData: connect.NewClient[v1.VNCDataChunk, v1.VNCDataChunk](
			httpClient,
			baseURL+GatewayServiceStreamVNCDataProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("StreamVNCData")),
			connect.WithClientOptions(opts...),
		),
		streamConsoleData: connect.NewClient[v1.ConsoleDataChunk, v1.ConsoleDataChunk](
			httpClient,
			baseURL+GatewayServiceStreamConsoleDataProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("StreamConsoleData")),
			connect.WithClientOptions(opts...),
		),
		getBMCInfo: connect.NewClient[v1.GetBMCInfoRequest, v1.GetBMCInfoResponse](
			httpClient,
			baseURL+GatewayServiceGetBMCInfoProcedure,
			connect.WithSchema(gatewayServiceMethods.ByName("GetBMCInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gatewayServiceClient implements GatewayServiceClient.
type gatewayServiceClient struct {
	healthCheck       *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	registerAgent     *connect.Client[v1.RegisterAgentRequest, v1.RegisterAgentResponse]
	agentHeartbeat    *connect.Client[v1.AgentHeartbeatRequest, v1.AgentHeartbeatResponse]
	powerOn           *connect.Client[v1.PowerOperationRequest, v1.PowerOperationResponse]
	powerOff          *connect.Client[v1.PowerOperationRequest, v1.PowerOperationResponse]
	powerCycle        *connect.Client[v1.PowerOperationRequest, v1.PowerOperationResponse]
	reset             *connect.Client[v1.PowerOperationRequest, v1.PowerOperationResponse]
	getPowerStatus    *connect.Client[v1.PowerStatusRequest, v1.PowerStatusResponse]
	createVNCSession  *connect.Client[v1.CreateVNCSessionRequest, v1.CreateVNCSessionResponse]
	getVNCSession     *connect.Client[v1.GetVNCSessionRequest, v1.GetVNCSessionResponse]
	closeVNCSession   *connect.Client[v1.CloseVNCSessionRequest, v1.CloseVNCSessionResponse]
	startVNCProxy     *connect.Client[v1.StartVNCProxyRequest, v1.StartVNCProxyResponse]
	createSOLSession  *connect.Client[v1.CreateSOLSessionRequest, v1.CreateSOLSessionResponse]
	getSOLSession     *connect.Client[v1.GetSOLSessionRequest, v1.GetSOLSessionResponse]
	closeSOLSession   *connect.Client[v1.CloseSOLSessionRequest, v1.CloseSOLSessionResponse]
	streamVNCData     *connect.Client[v1.VNCDataChunk, v1.VNCDataChunk]
	streamConsoleData *connect.Client[v1.ConsoleDataChunk, v1.ConsoleDataChunk]
	getBMCInfo        *connect.Client[v1.GetBMCInfoRequest, v1.GetBMCInfoResponse]
}

// HealthCheck calls gateway.v1.GatewayService.HealthCheck.
func (c *gatewayServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// RegisterAgent calls gateway.v1.GatewayService.RegisterAgent.
func (c *gatewayServiceClient) RegisterAgent(ctx context.Context, req *connect.Request[v1.RegisterAgentRequest]) (*connect.Response[v1.RegisterAgentResponse], error) {
	return c.registerAgent.CallUnary(ctx, req)
}

// AgentHeartbeat calls gateway.v1.GatewayService.AgentHeartbeat.
func (c *gatewayServiceClient) AgentHeartbeat(ctx context.Context, req *connect.Request[v1.AgentHeartbeatRequest]) (*connect.Response[v1.AgentHeartbeatResponse], error) {
	return c.agentHeartbeat.CallUnary(ctx, req)
}

// PowerOn calls gateway.v1.GatewayService.PowerOn.
func (c *gatewayServiceClient) PowerOn(ctx context.Context, req *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error) {
	return c.powerOn.CallUnary(ctx, req)
}

// PowerOff calls gateway.v1.GatewayService.PowerOff.
func (c *gatewayServiceClient) PowerOff(ctx context.Context, req *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error) {
	return c.powerOff.CallUnary(ctx, req)
}

// PowerCycle calls gateway.v1.GatewayService.PowerCycle.
func (c *gatewayServiceClient) PowerCycle(ctx context.Context, req *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error) {
	return c.powerCycle.CallUnary(ctx, req)
}

// Reset calls gateway.v1.GatewayService.Reset.
func (c *gatewayServiceClient) Reset(ctx context.Context, req *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error) {
	return c.reset.CallUnary(ctx, req)
}

// GetPowerStatus calls gateway.v1.GatewayService.GetPowerStatus.
func (c *gatewayServiceClient) GetPowerStatus(ctx context.Context, req *connect.Request[v1.PowerStatusRequest]) (*connect.Response[v1.PowerStatusResponse], error) {
	return c.getPowerStatus.CallUnary(ctx, req)
}

// CreateVNCSession calls gateway.v1.GatewayService.CreateVNCSession.
func (c *gatewayServiceClient) CreateVNCSession(ctx context.Context, req *connect.Request[v1.CreateVNCSessionRequest]) (*connect.Response[v1.CreateVNCSessionResponse], error) {
	return c.createVNCSession.CallUnary(ctx, req)
}

// GetVNCSession calls gateway.v1.GatewayService.GetVNCSession.
func (c *gatewayServiceClient) GetVNCSession(ctx context.Context, req *connect.Request[v1.GetVNCSessionRequest]) (*connect.Response[v1.GetVNCSessionResponse], error) {
	return c.getVNCSession.CallUnary(ctx, req)
}

// CloseVNCSession calls gateway.v1.GatewayService.CloseVNCSession.
func (c *gatewayServiceClient) CloseVNCSession(ctx context.Context, req *connect.Request[v1.CloseVNCSessionRequest]) (*connect.Response[v1.CloseVNCSessionResponse], error) {
	return c.closeVNCSession.CallUnary(ctx, req)
}

// StartVNCProxy calls gateway.v1.GatewayService.StartVNCProxy.
func (c *gatewayServiceClient) StartVNCProxy(ctx context.Context, req *connect.Request[v1.StartVNCProxyRequest]) (*connect.Response[v1.StartVNCProxyResponse], error) {
	return c.startVNCProxy.CallUnary(ctx, req)
}

// CreateSOLSession calls gateway.v1.GatewayService.CreateSOLSession.
func (c *gatewayServiceClient) CreateSOLSession(ctx context.Context, req *connect.Request[v1.CreateSOLSessionRequest]) (*connect.Response[v1.CreateSOLSessionResponse], error) {
	return c.createSOLSession.CallUnary(ctx, req)
}

// GetSOLSession calls gateway.v1.GatewayService.GetSOLSession.
func (c *gatewayServiceClient) GetSOLSession(ctx context.Context, req *connect.Request[v1.GetSOLSessionRequest]) (*connect.Response[v1.GetSOLSessionResponse], error) {
	return c.getSOLSession.CallUnary(ctx, req)
}

// CloseSOLSession calls gateway.v1.GatewayService.CloseSOLSession.
func (c *gatewayServiceClient) CloseSOLSession(ctx context.Context, req *connect.Request[v1.CloseSOLSessionRequest]) (*connect.Response[v1.CloseSOLSessionResponse], error) {
	return c.closeSOLSession.CallUnary(ctx, req)
}

// StreamVNCData calls gateway.v1.GatewayService.StreamVNCData.
func (c *gatewayServiceClient) StreamVNCData(ctx context.Context) *connect.BidiStreamForClient[v1.VNCDataChunk, v1.VNCDataChunk] {
	return c.streamVNCData.CallBidiStream(ctx)
}

// StreamConsoleData calls gateway.v1.GatewayService.StreamConsoleData.
func (c *gatewayServiceClient) StreamConsoleData(ctx context.Context) *connect.BidiStreamForClient[v1.ConsoleDataChunk, v1.ConsoleDataChunk] {
	return c.streamConsoleData.CallBidiStream(ctx)
}

// GetBMCInfo calls gateway.v1.GatewayService.GetBMCInfo.
func (c *gatewayServiceClient) GetBMCInfo(ctx context.Context, req *connect.Request[v1.GetBMCInfoRequest]) (*connect.Response[v1.GetBMCInfoResponse], error) {
	return c.getBMCInfo.CallUnary(ctx, req)
}

// GatewayServiceHandler is an implementation of the gateway.v1.GatewayService service.
type GatewayServiceHandler interface {
	// Health check endpoint for monitoring and load balancer health probes
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// RegisterAgent allows a Local Agent to register itself and announce available servers
	// This establishes the initial connection and server inventory
	RegisterAgent(context.Context, *connect.Request[v1.RegisterAgentRequest]) (*connect.Response[v1.RegisterAgentResponse], error)
	// AgentHeartbeat maintains the agent connection and provides server status updates
	// Agents send periodic heartbeats to keep the connection alive and update server state
	AgentHeartbeat(context.Context, *connect.Request[v1.AgentHeartbeatRequest]) (*connect.Response[v1.AgentHeartbeatResponse], error)
	// PowerOn sends power-on command to the server's BMC
	PowerOn(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error)
	// PowerOff sends graceful or forced power-off command to the server's BMC
	PowerOff(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error)
	// PowerCycle performs a power cycle (off then on) operation
	PowerCycle(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error)
	// Reset performs a hard reset of the server (equivalent to reset button)
	Reset(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error)
	// GetPowerStatus queries the current power state of the server
	GetPowerStatus(context.Context, *connect.Request[v1.PowerStatusRequest]) (*connect.Response[v1.PowerStatusResponse], error)
	// CreateVNCSession creates a VNC console session for remote access
	CreateVNCSession(context.Context, *connect.Request[v1.CreateVNCSessionRequest]) (*connect.Response[v1.CreateVNCSessionResponse], error)
	// GetVNCSession retrieves information about an existing VNC session
	GetVNCSession(context.Context, *connect.Request[v1.GetVNCSessionRequest]) (*connect.Response[v1.GetVNCSessionResponse], error)
	// CloseVNCSession terminates an active VNC session
	CloseVNCSession(context.Context, *connect.Request[v1.CloseVNCSessionRequest]) (*connect.Response[v1.CloseVNCSessionResponse], error)
	// StartVNCProxy requests an agent to start a VNC proxy for a specific BMC
	StartVNCProxy(context.Context, *connect.Request[v1.StartVNCProxyRequest]) (*connect.Response[v1.StartVNCProxyResponse], error)
	// CreateSOLSession creates a SOL console session for serial terminal access
	CreateSOLSession(context.Context, *connect.Request[v1.CreateSOLSessionRequest]) (*connect.Response[v1.CreateSOLSessionResponse], error)
	// GetSOLSession retrieves information about an existing SOL session
	GetSOLSession(context.Context, *connect.Request[v1.GetSOLSessionRequest]) (*connect.Response[v1.GetSOLSessionResponse], error)
	// CloseSOLSession terminates an active SOL session
	CloseSOLSession(context.Context, *connect.Request[v1.CloseSOLSessionRequest]) (*connect.Response[v1.CloseSOLSessionResponse], error)
	// Streaming RPC for VNC data (Gateway <-> Agent bidirectional streaming)
	// Gateway initiates this stream to agent, then bidirectionally streams VNC data
	StreamVNCData(context.Context, *connect.BidiStream[v1.VNCDataChunk, v1.VNCDataChunk]) error
	// Streaming RPC for SOL/Console data (Gateway <-> Agent bidirectional streaming)
	// Gateway initiates this stream to agent, then bidirectionally streams console data
	StreamConsoleData(context.Context, *connect.BidiStream[v1.ConsoleDataChunk, v1.ConsoleDataChunk]) error
	// GetBMCInfo retrieves detailed hardware information from the BMC
	// This returns firmware version, manufacturer details, and capabilities
	GetBMCInfo(context.Context, *connect.Request[v1.GetBMCInfoRequest]) (*connect.Response[v1.GetBMCInfoResponse], error)
}

// NewGatewayServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGatewayServiceHandler(svc GatewayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gatewayServiceMethods := v1.File_gateway_v1_gateway_proto.Services().ByName("GatewayService").Methods()
	gatewayServiceHealthCheckHandler := connect.NewUnaryHandler(
		GatewayServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(gatewayServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceRegisterAgentHandler := connect.NewUnaryHandler(
		GatewayServiceRegisterAgentProcedure,
		svc.RegisterAgent,
		connect.WithSchema(gatewayServiceMethods.ByName("RegisterAgent")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceAgentHeartbeatHandler := connect.NewUnaryHandler(
		GatewayServiceAgentHeartbeatProcedure,
		svc.AgentHeartbeat,
		connect.WithSchema(gatewayServiceMethods.ByName("AgentHeartbeat")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServicePowerOnHandler := connect.NewUnaryHandler(
		GatewayServicePowerOnProcedure,
		svc.PowerOn,
		connect.WithSchema(gatewayServiceMethods.ByName("PowerOn")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServicePowerOffHandler := connect.NewUnaryHandler(
		GatewayServicePowerOffProcedure,
		svc.PowerOff,
		connect.WithSchema(gatewayServiceMethods.ByName("PowerOff")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServicePowerCycleHandler := connect.NewUnaryHandler(
		GatewayServicePowerCycleProcedure,
		svc.PowerCycle,
		connect.WithSchema(gatewayServiceMethods.ByName("PowerCycle")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceResetHandler := connect.NewUnaryHandler(
		GatewayServiceResetProcedure,
		svc.Reset,
		connect.WithSchema(gatewayServiceMethods.ByName("Reset")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceGetPowerStatusHandler := connect.NewUnaryHandler(
		GatewayServiceGetPowerStatusProcedure,
		svc.GetPowerStatus,
		connect.WithSchema(gatewayServiceMethods.ByName("GetPowerStatus")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceCreateVNCSessionHandler := connect.NewUnaryHandler(
		GatewayServiceCreateVNCSessionProcedure,
		svc.CreateVNCSession,
		connect.WithSchema(gatewayServiceMethods.ByName("CreateVNCSession")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceGetVNCSessionHandler := connect.NewUnaryHandler(
		GatewayServiceGetVNCSessionProcedure,
		svc.GetVNCSession,
		connect.WithSchema(gatewayServiceMethods.ByName("GetVNCSession")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceCloseVNCSessionHandler := connect.NewUnaryHandler(
		GatewayServiceCloseVNCSessionProcedure,
		svc.CloseVNCSession,
		connect.WithSchema(gatewayServiceMethods.ByName("CloseVNCSession")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceStartVNCProxyHandler := connect.NewUnaryHandler(
		GatewayServiceStartVNCProxyProcedure,
		svc.StartVNCProxy,
		connect.WithSchema(gatewayServiceMethods.ByName("StartVNCProxy")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceCreateSOLSessionHandler := connect.NewUnaryHandler(
		GatewayServiceCreateSOLSessionProcedure,
		svc.CreateSOLSession,
		connect.WithSchema(gatewayServiceMethods.ByName("CreateSOLSession")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceGetSOLSessionHandler := connect.NewUnaryHandler(
		GatewayServiceGetSOLSessionProcedure,
		svc.GetSOLSession,
		connect.WithSchema(gatewayServiceMethods.ByName("GetSOLSession")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceCloseSOLSessionHandler := connect.NewUnaryHandler(
		GatewayServiceCloseSOLSessionProcedure,
		svc.CloseSOLSession,
		connect.WithSchema(gatewayServiceMethods.ByName("CloseSOLSession")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceStreamVNCDataHandler := connect.NewBidiStreamHandler(
		GatewayServiceStreamVNCDataProcedure,
		svc.StreamVNCData,
		connect.WithSchema(gatewayServiceMethods.ByName("StreamVNCData")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceStreamConsoleDataHandler := connect.NewBidiStreamHandler(
		GatewayServiceStreamConsoleDataProcedure,
		svc.StreamConsoleData,
		connect.WithSchema(gatewayServiceMethods.ByName("StreamConsoleData")),
		connect.WithHandlerOptions(opts...),
	)
	gatewayServiceGetBMCInfoHandler := connect.NewUnaryHandler(
		GatewayServiceGetBMCInfoProcedure,
		svc.GetBMCInfo,
		connect.WithSchema(gatewayServiceMethods.ByName("GetBMCInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/gateway.v1.GatewayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GatewayServiceHealthCheckProcedure:
			gatewayServiceHealthCheckHandler.ServeHTTP(w, r)
		case GatewayServiceRegisterAgentProcedure:
			gatewayServiceRegisterAgentHandler.ServeHTTP(w, r)
		case GatewayServiceAgentHeartbeatProcedure:
			gatewayServiceAgentHeartbeatHandler.ServeHTTP(w, r)
		case GatewayServicePowerOnProcedure:
			gatewayServicePowerOnHandler.ServeHTTP(w, r)
		case GatewayServicePowerOffProcedure:
			gatewayServicePowerOffHandler.ServeHTTP(w, r)
		case GatewayServicePowerCycleProcedure:
			gatewayServicePowerCycleHandler.ServeHTTP(w, r)
		case GatewayServiceResetProcedure:
			gatewayServiceResetHandler.ServeHTTP(w, r)
		case GatewayServiceGetPowerStatusProcedure:
			gatewayServiceGetPowerStatusHandler.ServeHTTP(w, r)
		case GatewayServiceCreateVNCSessionProcedure:
			gatewayServiceCreateVNCSessionHandler.ServeHTTP(w, r)
		case GatewayServiceGetVNCSessionProcedure:
			gatewayServiceGetVNCSessionHandler.ServeHTTP(w, r)
		case GatewayServiceCloseVNCSessionProcedure:
			gatewayServiceCloseVNCSessionHandler.ServeHTTP(w, r)
		case GatewayServiceStartVNCProxyProcedure:
			gatewayServiceStartVNCProxyHandler.ServeHTTP(w, r)
		case GatewayServiceCreateSOLSessionProcedure:
			gatewayServiceCreateSOLSessionHandler.ServeHTTP(w, r)
		case GatewayServiceGetSOLSessionProcedure:
			gatewayServiceGetSOLSessionHandler.ServeHTTP(w, r)
		case GatewayServiceCloseSOLSessionProcedure:
			gatewayServiceCloseSOLSessionHandler.ServeHTTP(w, r)
		case GatewayServiceStreamVNCDataProcedure:
			gatewayServiceStreamVNCDataHandler.ServeHTTP(w, r)
		case GatewayServiceStreamConsoleDataProcedure:
			gatewayServiceStreamConsoleDataHandler.ServeHTTP(w, r)
		case GatewayServiceGetBMCInfoProcedure:
			gatewayServiceGetBMCInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGatewayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGatewayServiceHandler struct{}

func (UnimplementedGatewayServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.HealthCheck is not implemented"))
}

func (UnimplementedGatewayServiceHandler) RegisterAgent(context.Context, *connect.Request[v1.RegisterAgentRequest]) (*connect.Response[v1.RegisterAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.RegisterAgent is not implemented"))
}

func (UnimplementedGatewayServiceHandler) AgentHeartbeat(context.Context, *connect.Request[v1.AgentHeartbeatRequest]) (*connect.Response[v1.AgentHeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.AgentHeartbeat is not implemented"))
}

func (UnimplementedGatewayServiceHandler) PowerOn(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.PowerOn is not implemented"))
}

func (UnimplementedGatewayServiceHandler) PowerOff(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.PowerOff is not implemented"))
}

func (UnimplementedGatewayServiceHandler) PowerCycle(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.PowerCycle is not implemented"))
}

func (UnimplementedGatewayServiceHandler) Reset(context.Context, *connect.Request[v1.PowerOperationRequest]) (*connect.Response[v1.PowerOperationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.Reset is not implemented"))
}

func (UnimplementedGatewayServiceHandler) GetPowerStatus(context.Context, *connect.Request[v1.PowerStatusRequest]) (*connect.Response[v1.PowerStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.GetPowerStatus is not implemented"))
}

func (UnimplementedGatewayServiceHandler) CreateVNCSession(context.Context, *connect.Request[v1.CreateVNCSessionRequest]) (*connect.Response[v1.CreateVNCSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.CreateVNCSession is not implemented"))
}

func (UnimplementedGatewayServiceHandler) GetVNCSession(context.Context, *connect.Request[v1.GetVNCSessionRequest]) (*connect.Response[v1.GetVNCSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.GetVNCSession is not implemented"))
}

func (UnimplementedGatewayServiceHandler) CloseVNCSession(context.Context, *connect.Request[v1.CloseVNCSessionRequest]) (*connect.Response[v1.CloseVNCSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.CloseVNCSession is not implemented"))
}

func (UnimplementedGatewayServiceHandler) StartVNCProxy(context.Context, *connect.Request[v1.StartVNCProxyRequest]) (*connect.Response[v1.StartVNCProxyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.StartVNCProxy is not implemented"))
}

func (UnimplementedGatewayServiceHandler) CreateSOLSession(context.Context, *connect.Request[v1.CreateSOLSessionRequest]) (*connect.Response[v1.CreateSOLSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.CreateSOLSession is not implemented"))
}

func (UnimplementedGatewayServiceHandler) GetSOLSession(context.Context, *connect.Request[v1.GetSOLSessionRequest]) (*connect.Response[v1.GetSOLSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.GetSOLSession is not implemented"))
}

func (UnimplementedGatewayServiceHandler) CloseSOLSession(context.Context, *connect.Request[v1.CloseSOLSessionRequest]) (*connect.Response[v1.CloseSOLSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.CloseSOLSession is not implemented"))
}

func (UnimplementedGatewayServiceHandler) StreamVNCData(context.Context, *connect.BidiStream[v1.VNCDataChunk, v1.VNCDataChunk]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.StreamVNCData is not implemented"))
}

func (UnimplementedGatewayServiceHandler) StreamConsoleData(context.Context, *connect.BidiStream[v1.ConsoleDataChunk, v1.ConsoleDataChunk]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.StreamConsoleData is not implemented"))
}

func (UnimplementedGatewayServiceHandler) GetBMCInfo(context.Context, *connect.Request[v1.GetBMCInfoRequest]) (*connect.Response[v1.GetBMCInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gateway.v1.GatewayService.GetBMCInfo is not implemented"))
}
