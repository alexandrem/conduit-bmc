// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: manager/v1/admin.proto

package managerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "manager/gen/manager/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "manager.v1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceGetDashboardMetricsProcedure is the fully-qualified name of the AdminService's
	// GetDashboardMetrics RPC.
	AdminServiceGetDashboardMetricsProcedure = "/manager.v1.AdminService/GetDashboardMetrics"
	// AdminServiceListAllServersProcedure is the fully-qualified name of the AdminService's
	// ListAllServers RPC.
	AdminServiceListAllServersProcedure = "/manager.v1.AdminService/ListAllServers"
	// AdminServiceListAllCustomersProcedure is the fully-qualified name of the AdminService's
	// ListAllCustomers RPC.
	AdminServiceListAllCustomersProcedure = "/manager.v1.AdminService/ListAllCustomers"
	// AdminServiceGetGatewayHealthProcedure is the fully-qualified name of the AdminService's
	// GetGatewayHealth RPC.
	AdminServiceGetGatewayHealthProcedure = "/manager.v1.AdminService/GetGatewayHealth"
	// AdminServiceGetRegionsProcedure is the fully-qualified name of the AdminService's GetRegions RPC.
	AdminServiceGetRegionsProcedure = "/manager.v1.AdminService/GetRegions"
	// AdminServiceLaunchVNCSessionProcedure is the fully-qualified name of the AdminService's
	// LaunchVNCSession RPC.
	AdminServiceLaunchVNCSessionProcedure = "/manager.v1.AdminService/LaunchVNCSession"
	// AdminServiceLaunchSOLSessionProcedure is the fully-qualified name of the AdminService's
	// LaunchSOLSession RPC.
	AdminServiceLaunchSOLSessionProcedure = "/manager.v1.AdminService/LaunchSOLSession"
)

// AdminServiceClient is a client for the manager.v1.AdminService service.
type AdminServiceClient interface {
	// Dashboard metrics and overview
	GetDashboardMetrics(context.Context, *connect.Request[v1.GetDashboardMetricsRequest]) (*connect.Response[v1.GetDashboardMetricsResponse], error)
	// Server management across all customers
	ListAllServers(context.Context, *connect.Request[v1.ListAllServersRequest]) (*connect.Response[v1.ListAllServersResponse], error)
	// Customer management
	ListAllCustomers(context.Context, *connect.Request[v1.ListAllCustomersRequest]) (*connect.Response[v1.ListAllCustomersResponse], error)
	// Gateway health and monitoring
	GetGatewayHealth(context.Context, *connect.Request[v1.GetGatewayHealthRequest]) (*connect.Response[v1.GetGatewayHealthResponse], error)
	// Available regions for filtering
	GetRegions(context.Context, *connect.Request[v1.GetRegionsRequest]) (*connect.Response[v1.GetRegionsResponse], error)
	// VNC/SOL session management for admin console
	LaunchVNCSession(context.Context, *connect.Request[v1.LaunchSessionRequest]) (*connect.Response[v1.LaunchSessionResponse], error)
	LaunchSOLSession(context.Context, *connect.Request[v1.LaunchSessionRequest]) (*connect.Response[v1.LaunchSessionResponse], error)
}

// NewAdminServiceClient constructs a client for the manager.v1.AdminService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adminServiceMethods := v1.File_manager_v1_admin_proto.Services().ByName("AdminService").Methods()
	return &adminServiceClient{
		getDashboardMetrics: connect.NewClient[v1.GetDashboardMetricsRequest, v1.GetDashboardMetricsResponse](
			httpClient,
			baseURL+AdminServiceGetDashboardMetricsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetDashboardMetrics")),
			connect.WithClientOptions(opts...),
		),
		listAllServers: connect.NewClient[v1.ListAllServersRequest, v1.ListAllServersResponse](
			httpClient,
			baseURL+AdminServiceListAllServersProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ListAllServers")),
			connect.WithClientOptions(opts...),
		),
		listAllCustomers: connect.NewClient[v1.ListAllCustomersRequest, v1.ListAllCustomersResponse](
			httpClient,
			baseURL+AdminServiceListAllCustomersProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ListAllCustomers")),
			connect.WithClientOptions(opts...),
		),
		getGatewayHealth: connect.NewClient[v1.GetGatewayHealthRequest, v1.GetGatewayHealthResponse](
			httpClient,
			baseURL+AdminServiceGetGatewayHealthProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetGatewayHealth")),
			connect.WithClientOptions(opts...),
		),
		getRegions: connect.NewClient[v1.GetRegionsRequest, v1.GetRegionsResponse](
			httpClient,
			baseURL+AdminServiceGetRegionsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetRegions")),
			connect.WithClientOptions(opts...),
		),
		launchVNCSession: connect.NewClient[v1.LaunchSessionRequest, v1.LaunchSessionResponse](
			httpClient,
			baseURL+AdminServiceLaunchVNCSessionProcedure,
			connect.WithSchema(adminServiceMethods.ByName("LaunchVNCSession")),
			connect.WithClientOptions(opts...),
		),
		launchSOLSession: connect.NewClient[v1.LaunchSessionRequest, v1.LaunchSessionResponse](
			httpClient,
			baseURL+AdminServiceLaunchSOLSessionProcedure,
			connect.WithSchema(adminServiceMethods.ByName("LaunchSOLSession")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	getDashboardMetrics *connect.Client[v1.GetDashboardMetricsRequest, v1.GetDashboardMetricsResponse]
	listAllServers      *connect.Client[v1.ListAllServersRequest, v1.ListAllServersResponse]
	listAllCustomers    *connect.Client[v1.ListAllCustomersRequest, v1.ListAllCustomersResponse]
	getGatewayHealth    *connect.Client[v1.GetGatewayHealthRequest, v1.GetGatewayHealthResponse]
	getRegions          *connect.Client[v1.GetRegionsRequest, v1.GetRegionsResponse]
	launchVNCSession    *connect.Client[v1.LaunchSessionRequest, v1.LaunchSessionResponse]
	launchSOLSession    *connect.Client[v1.LaunchSessionRequest, v1.LaunchSessionResponse]
}

// GetDashboardMetrics calls manager.v1.AdminService.GetDashboardMetrics.
func (c *adminServiceClient) GetDashboardMetrics(ctx context.Context, req *connect.Request[v1.GetDashboardMetricsRequest]) (*connect.Response[v1.GetDashboardMetricsResponse], error) {
	return c.getDashboardMetrics.CallUnary(ctx, req)
}

// ListAllServers calls manager.v1.AdminService.ListAllServers.
func (c *adminServiceClient) ListAllServers(ctx context.Context, req *connect.Request[v1.ListAllServersRequest]) (*connect.Response[v1.ListAllServersResponse], error) {
	return c.listAllServers.CallUnary(ctx, req)
}

// ListAllCustomers calls manager.v1.AdminService.ListAllCustomers.
func (c *adminServiceClient) ListAllCustomers(ctx context.Context, req *connect.Request[v1.ListAllCustomersRequest]) (*connect.Response[v1.ListAllCustomersResponse], error) {
	return c.listAllCustomers.CallUnary(ctx, req)
}

// GetGatewayHealth calls manager.v1.AdminService.GetGatewayHealth.
func (c *adminServiceClient) GetGatewayHealth(ctx context.Context, req *connect.Request[v1.GetGatewayHealthRequest]) (*connect.Response[v1.GetGatewayHealthResponse], error) {
	return c.getGatewayHealth.CallUnary(ctx, req)
}

// GetRegions calls manager.v1.AdminService.GetRegions.
func (c *adminServiceClient) GetRegions(ctx context.Context, req *connect.Request[v1.GetRegionsRequest]) (*connect.Response[v1.GetRegionsResponse], error) {
	return c.getRegions.CallUnary(ctx, req)
}

// LaunchVNCSession calls manager.v1.AdminService.LaunchVNCSession.
func (c *adminServiceClient) LaunchVNCSession(ctx context.Context, req *connect.Request[v1.LaunchSessionRequest]) (*connect.Response[v1.LaunchSessionResponse], error) {
	return c.launchVNCSession.CallUnary(ctx, req)
}

// LaunchSOLSession calls manager.v1.AdminService.LaunchSOLSession.
func (c *adminServiceClient) LaunchSOLSession(ctx context.Context, req *connect.Request[v1.LaunchSessionRequest]) (*connect.Response[v1.LaunchSessionResponse], error) {
	return c.launchSOLSession.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the manager.v1.AdminService service.
type AdminServiceHandler interface {
	// Dashboard metrics and overview
	GetDashboardMetrics(context.Context, *connect.Request[v1.GetDashboardMetricsRequest]) (*connect.Response[v1.GetDashboardMetricsResponse], error)
	// Server management across all customers
	ListAllServers(context.Context, *connect.Request[v1.ListAllServersRequest]) (*connect.Response[v1.ListAllServersResponse], error)
	// Customer management
	ListAllCustomers(context.Context, *connect.Request[v1.ListAllCustomersRequest]) (*connect.Response[v1.ListAllCustomersResponse], error)
	// Gateway health and monitoring
	GetGatewayHealth(context.Context, *connect.Request[v1.GetGatewayHealthRequest]) (*connect.Response[v1.GetGatewayHealthResponse], error)
	// Available regions for filtering
	GetRegions(context.Context, *connect.Request[v1.GetRegionsRequest]) (*connect.Response[v1.GetRegionsResponse], error)
	// VNC/SOL session management for admin console
	LaunchVNCSession(context.Context, *connect.Request[v1.LaunchSessionRequest]) (*connect.Response[v1.LaunchSessionResponse], error)
	LaunchSOLSession(context.Context, *connect.Request[v1.LaunchSessionRequest]) (*connect.Response[v1.LaunchSessionResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceMethods := v1.File_manager_v1_admin_proto.Services().ByName("AdminService").Methods()
	adminServiceGetDashboardMetricsHandler := connect.NewUnaryHandler(
		AdminServiceGetDashboardMetricsProcedure,
		svc.GetDashboardMetrics,
		connect.WithSchema(adminServiceMethods.ByName("GetDashboardMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListAllServersHandler := connect.NewUnaryHandler(
		AdminServiceListAllServersProcedure,
		svc.ListAllServers,
		connect.WithSchema(adminServiceMethods.ByName("ListAllServers")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListAllCustomersHandler := connect.NewUnaryHandler(
		AdminServiceListAllCustomersProcedure,
		svc.ListAllCustomers,
		connect.WithSchema(adminServiceMethods.ByName("ListAllCustomers")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetGatewayHealthHandler := connect.NewUnaryHandler(
		AdminServiceGetGatewayHealthProcedure,
		svc.GetGatewayHealth,
		connect.WithSchema(adminServiceMethods.ByName("GetGatewayHealth")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetRegionsHandler := connect.NewUnaryHandler(
		AdminServiceGetRegionsProcedure,
		svc.GetRegions,
		connect.WithSchema(adminServiceMethods.ByName("GetRegions")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceLaunchVNCSessionHandler := connect.NewUnaryHandler(
		AdminServiceLaunchVNCSessionProcedure,
		svc.LaunchVNCSession,
		connect.WithSchema(adminServiceMethods.ByName("LaunchVNCSession")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceLaunchSOLSessionHandler := connect.NewUnaryHandler(
		AdminServiceLaunchSOLSessionProcedure,
		svc.LaunchSOLSession,
		connect.WithSchema(adminServiceMethods.ByName("LaunchSOLSession")),
		connect.WithHandlerOptions(opts...),
	)
	return "/manager.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceGetDashboardMetricsProcedure:
			adminServiceGetDashboardMetricsHandler.ServeHTTP(w, r)
		case AdminServiceListAllServersProcedure:
			adminServiceListAllServersHandler.ServeHTTP(w, r)
		case AdminServiceListAllCustomersProcedure:
			adminServiceListAllCustomersHandler.ServeHTTP(w, r)
		case AdminServiceGetGatewayHealthProcedure:
			adminServiceGetGatewayHealthHandler.ServeHTTP(w, r)
		case AdminServiceGetRegionsProcedure:
			adminServiceGetRegionsHandler.ServeHTTP(w, r)
		case AdminServiceLaunchVNCSessionProcedure:
			adminServiceLaunchVNCSessionHandler.ServeHTTP(w, r)
		case AdminServiceLaunchSOLSessionProcedure:
			adminServiceLaunchSOLSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) GetDashboardMetrics(context.Context, *connect.Request[v1.GetDashboardMetricsRequest]) (*connect.Response[v1.GetDashboardMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.AdminService.GetDashboardMetrics is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListAllServers(context.Context, *connect.Request[v1.ListAllServersRequest]) (*connect.Response[v1.ListAllServersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.AdminService.ListAllServers is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListAllCustomers(context.Context, *connect.Request[v1.ListAllCustomersRequest]) (*connect.Response[v1.ListAllCustomersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.AdminService.ListAllCustomers is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetGatewayHealth(context.Context, *connect.Request[v1.GetGatewayHealthRequest]) (*connect.Response[v1.GetGatewayHealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.AdminService.GetGatewayHealth is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetRegions(context.Context, *connect.Request[v1.GetRegionsRequest]) (*connect.Response[v1.GetRegionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.AdminService.GetRegions is not implemented"))
}

func (UnimplementedAdminServiceHandler) LaunchVNCSession(context.Context, *connect.Request[v1.LaunchSessionRequest]) (*connect.Response[v1.LaunchSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.AdminService.LaunchVNCSession is not implemented"))
}

func (UnimplementedAdminServiceHandler) LaunchSOLSession(context.Context, *connect.Request[v1.LaunchSessionRequest]) (*connect.Response[v1.LaunchSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.AdminService.LaunchSOLSession is not implemented"))
}
