// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: manager/v1/manager.proto

package managerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "manager/gen/manager/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BMCManagerServiceName is the fully-qualified name of the BMCManagerService service.
	BMCManagerServiceName = "manager.v1.BMCManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BMCManagerServiceAuthenticateProcedure is the fully-qualified name of the BMCManagerService's
	// Authenticate RPC.
	BMCManagerServiceAuthenticateProcedure = "/manager.v1.BMCManagerService/Authenticate"
	// BMCManagerServiceRefreshTokenProcedure is the fully-qualified name of the BMCManagerService's
	// RefreshToken RPC.
	BMCManagerServiceRefreshTokenProcedure = "/manager.v1.BMCManagerService/RefreshToken"
	// BMCManagerServiceGetServerTokenProcedure is the fully-qualified name of the BMCManagerService's
	// GetServerToken RPC.
	BMCManagerServiceGetServerTokenProcedure = "/manager.v1.BMCManagerService/GetServerToken"
	// BMCManagerServiceRegisterServerProcedure is the fully-qualified name of the BMCManagerService's
	// RegisterServer RPC.
	BMCManagerServiceRegisterServerProcedure = "/manager.v1.BMCManagerService/RegisterServer"
	// BMCManagerServiceGetServerLocationProcedure is the fully-qualified name of the
	// BMCManagerService's GetServerLocation RPC.
	BMCManagerServiceGetServerLocationProcedure = "/manager.v1.BMCManagerService/GetServerLocation"
	// BMCManagerServiceRegisterGatewayProcedure is the fully-qualified name of the BMCManagerService's
	// RegisterGateway RPC.
	BMCManagerServiceRegisterGatewayProcedure = "/manager.v1.BMCManagerService/RegisterGateway"
	// BMCManagerServiceListGatewaysProcedure is the fully-qualified name of the BMCManagerService's
	// ListGateways RPC.
	BMCManagerServiceListGatewaysProcedure = "/manager.v1.BMCManagerService/ListGateways"
	// BMCManagerServiceGetSystemStatusProcedure is the fully-qualified name of the BMCManagerService's
	// GetSystemStatus RPC.
	BMCManagerServiceGetSystemStatusProcedure = "/manager.v1.BMCManagerService/GetSystemStatus"
	// BMCManagerServiceGetServerProcedure is the fully-qualified name of the BMCManagerService's
	// GetServer RPC.
	BMCManagerServiceGetServerProcedure = "/manager.v1.BMCManagerService/GetServer"
	// BMCManagerServiceListServersProcedure is the fully-qualified name of the BMCManagerService's
	// ListServers RPC.
	BMCManagerServiceListServersProcedure = "/manager.v1.BMCManagerService/ListServers"
	// BMCManagerServiceReportAvailableEndpointsProcedure is the fully-qualified name of the
	// BMCManagerService's ReportAvailableEndpoints RPC.
	BMCManagerServiceReportAvailableEndpointsProcedure = "/manager.v1.BMCManagerService/ReportAvailableEndpoints"
)

// BMCManagerServiceClient is a client for the manager.v1.BMCManagerService service.
type BMCManagerServiceClient interface {
	// Authenticate verifies customer credentials and issues access tokens
	// Supports multiple authentication methods (password, OIDC, API keys)
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error)
	// RefreshToken issues new access tokens using refresh tokens
	// Can optionally scope tokens to specific servers for enhanced security
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// GetServerToken generates a server-specific token with encrypted BMC context
	// Enables stateless gateway operations without server ID lookups
	GetServerToken(context.Context, *connect.Request[v1.GetServerTokenRequest]) (*connect.Response[v1.GetServerTokenResponse], error)
	// RegisterServer registers a server and maps it to a regional gateway
	// Called during server provisioning to establish BMC access routing
	RegisterServer(context.Context, *connect.Request[v1.RegisterServerRequest]) (*connect.Response[v1.RegisterServerResponse], error)
	// GetServerLocation resolves which gateway handles a specific server
	// Used by CLI and other clients to route server requests correctly
	GetServerLocation(context.Context, *connect.Request[v1.GetServerLocationRequest]) (*connect.Response[v1.GetServerLocationResponse], error)
	// RegisterGateway allows gateways to register and announce their capabilities
	// Establishes which datacenters each gateway can serve
	RegisterGateway(context.Context, *connect.Request[v1.RegisterGatewayRequest]) (*connect.Response[v1.RegisterGatewayResponse], error)
	// ListGateways returns available gateways, optionally filtered by region
	// Used for gateway discovery and load balancing
	ListGateways(context.Context, *connect.Request[v1.ListGatewaysRequest]) (*connect.Response[v1.ListGatewaysResponse], error)
	// GetSystemStatus returns overall system status including all gateways and their servers
	// Admin endpoint for monitoring and debugging
	GetSystemStatus(context.Context, *connect.Request[v1.GetSystemStatusRequest]) (*connect.Response[v1.GetSystemStatusResponse], error)
	// GetServer retrieves detailed information about a specific server
	// Validates customer access and returns server metadata and BMC endpoint
	GetServer(context.Context, *connect.Request[v1.GetServerRequest]) (*connect.Response[v1.GetServerResponse], error)
	// ListServers returns all servers accessible by the authenticated customer
	// Supports pagination for large server inventories
	ListServers(context.Context, *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error)
	// ReportAvailableEndpoints allows gateways to report BMC endpoints they can proxy
	// This establishes the BMC endpoint to gateway mapping for routing decisions
	ReportAvailableEndpoints(context.Context, *connect.Request[v1.ReportAvailableEndpointsRequest]) (*connect.Response[v1.ReportAvailableEndpointsResponse], error)
}

// NewBMCManagerServiceClient constructs a client for the manager.v1.BMCManagerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBMCManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BMCManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bMCManagerServiceMethods := v1.File_manager_v1_manager_proto.Services().ByName("BMCManagerService").Methods()
	return &bMCManagerServiceClient{
		authenticate: connect.NewClient[v1.AuthenticateRequest, v1.AuthenticateResponse](
			httpClient,
			baseURL+BMCManagerServiceAuthenticateProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("Authenticate")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+BMCManagerServiceRefreshTokenProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		getServerToken: connect.NewClient[v1.GetServerTokenRequest, v1.GetServerTokenResponse](
			httpClient,
			baseURL+BMCManagerServiceGetServerTokenProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("GetServerToken")),
			connect.WithClientOptions(opts...),
		),
		registerServer: connect.NewClient[v1.RegisterServerRequest, v1.RegisterServerResponse](
			httpClient,
			baseURL+BMCManagerServiceRegisterServerProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("RegisterServer")),
			connect.WithClientOptions(opts...),
		),
		getServerLocation: connect.NewClient[v1.GetServerLocationRequest, v1.GetServerLocationResponse](
			httpClient,
			baseURL+BMCManagerServiceGetServerLocationProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("GetServerLocation")),
			connect.WithClientOptions(opts...),
		),
		registerGateway: connect.NewClient[v1.RegisterGatewayRequest, v1.RegisterGatewayResponse](
			httpClient,
			baseURL+BMCManagerServiceRegisterGatewayProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("RegisterGateway")),
			connect.WithClientOptions(opts...),
		),
		listGateways: connect.NewClient[v1.ListGatewaysRequest, v1.ListGatewaysResponse](
			httpClient,
			baseURL+BMCManagerServiceListGatewaysProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("ListGateways")),
			connect.WithClientOptions(opts...),
		),
		getSystemStatus: connect.NewClient[v1.GetSystemStatusRequest, v1.GetSystemStatusResponse](
			httpClient,
			baseURL+BMCManagerServiceGetSystemStatusProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("GetSystemStatus")),
			connect.WithClientOptions(opts...),
		),
		getServer: connect.NewClient[v1.GetServerRequest, v1.GetServerResponse](
			httpClient,
			baseURL+BMCManagerServiceGetServerProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("GetServer")),
			connect.WithClientOptions(opts...),
		),
		listServers: connect.NewClient[v1.ListServersRequest, v1.ListServersResponse](
			httpClient,
			baseURL+BMCManagerServiceListServersProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("ListServers")),
			connect.WithClientOptions(opts...),
		),
		reportAvailableEndpoints: connect.NewClient[v1.ReportAvailableEndpointsRequest, v1.ReportAvailableEndpointsResponse](
			httpClient,
			baseURL+BMCManagerServiceReportAvailableEndpointsProcedure,
			connect.WithSchema(bMCManagerServiceMethods.ByName("ReportAvailableEndpoints")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bMCManagerServiceClient implements BMCManagerServiceClient.
type bMCManagerServiceClient struct {
	authenticate             *connect.Client[v1.AuthenticateRequest, v1.AuthenticateResponse]
	refreshToken             *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	getServerToken           *connect.Client[v1.GetServerTokenRequest, v1.GetServerTokenResponse]
	registerServer           *connect.Client[v1.RegisterServerRequest, v1.RegisterServerResponse]
	getServerLocation        *connect.Client[v1.GetServerLocationRequest, v1.GetServerLocationResponse]
	registerGateway          *connect.Client[v1.RegisterGatewayRequest, v1.RegisterGatewayResponse]
	listGateways             *connect.Client[v1.ListGatewaysRequest, v1.ListGatewaysResponse]
	getSystemStatus          *connect.Client[v1.GetSystemStatusRequest, v1.GetSystemStatusResponse]
	getServer                *connect.Client[v1.GetServerRequest, v1.GetServerResponse]
	listServers              *connect.Client[v1.ListServersRequest, v1.ListServersResponse]
	reportAvailableEndpoints *connect.Client[v1.ReportAvailableEndpointsRequest, v1.ReportAvailableEndpointsResponse]
}

// Authenticate calls manager.v1.BMCManagerService.Authenticate.
func (c *bMCManagerServiceClient) Authenticate(ctx context.Context, req *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// RefreshToken calls manager.v1.BMCManagerService.RefreshToken.
func (c *bMCManagerServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// GetServerToken calls manager.v1.BMCManagerService.GetServerToken.
func (c *bMCManagerServiceClient) GetServerToken(ctx context.Context, req *connect.Request[v1.GetServerTokenRequest]) (*connect.Response[v1.GetServerTokenResponse], error) {
	return c.getServerToken.CallUnary(ctx, req)
}

// RegisterServer calls manager.v1.BMCManagerService.RegisterServer.
func (c *bMCManagerServiceClient) RegisterServer(ctx context.Context, req *connect.Request[v1.RegisterServerRequest]) (*connect.Response[v1.RegisterServerResponse], error) {
	return c.registerServer.CallUnary(ctx, req)
}

// GetServerLocation calls manager.v1.BMCManagerService.GetServerLocation.
func (c *bMCManagerServiceClient) GetServerLocation(ctx context.Context, req *connect.Request[v1.GetServerLocationRequest]) (*connect.Response[v1.GetServerLocationResponse], error) {
	return c.getServerLocation.CallUnary(ctx, req)
}

// RegisterGateway calls manager.v1.BMCManagerService.RegisterGateway.
func (c *bMCManagerServiceClient) RegisterGateway(ctx context.Context, req *connect.Request[v1.RegisterGatewayRequest]) (*connect.Response[v1.RegisterGatewayResponse], error) {
	return c.registerGateway.CallUnary(ctx, req)
}

// ListGateways calls manager.v1.BMCManagerService.ListGateways.
func (c *bMCManagerServiceClient) ListGateways(ctx context.Context, req *connect.Request[v1.ListGatewaysRequest]) (*connect.Response[v1.ListGatewaysResponse], error) {
	return c.listGateways.CallUnary(ctx, req)
}

// GetSystemStatus calls manager.v1.BMCManagerService.GetSystemStatus.
func (c *bMCManagerServiceClient) GetSystemStatus(ctx context.Context, req *connect.Request[v1.GetSystemStatusRequest]) (*connect.Response[v1.GetSystemStatusResponse], error) {
	return c.getSystemStatus.CallUnary(ctx, req)
}

// GetServer calls manager.v1.BMCManagerService.GetServer.
func (c *bMCManagerServiceClient) GetServer(ctx context.Context, req *connect.Request[v1.GetServerRequest]) (*connect.Response[v1.GetServerResponse], error) {
	return c.getServer.CallUnary(ctx, req)
}

// ListServers calls manager.v1.BMCManagerService.ListServers.
func (c *bMCManagerServiceClient) ListServers(ctx context.Context, req *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error) {
	return c.listServers.CallUnary(ctx, req)
}

// ReportAvailableEndpoints calls manager.v1.BMCManagerService.ReportAvailableEndpoints.
func (c *bMCManagerServiceClient) ReportAvailableEndpoints(ctx context.Context, req *connect.Request[v1.ReportAvailableEndpointsRequest]) (*connect.Response[v1.ReportAvailableEndpointsResponse], error) {
	return c.reportAvailableEndpoints.CallUnary(ctx, req)
}

// BMCManagerServiceHandler is an implementation of the manager.v1.BMCManagerService service.
type BMCManagerServiceHandler interface {
	// Authenticate verifies customer credentials and issues access tokens
	// Supports multiple authentication methods (password, OIDC, API keys)
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error)
	// RefreshToken issues new access tokens using refresh tokens
	// Can optionally scope tokens to specific servers for enhanced security
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// GetServerToken generates a server-specific token with encrypted BMC context
	// Enables stateless gateway operations without server ID lookups
	GetServerToken(context.Context, *connect.Request[v1.GetServerTokenRequest]) (*connect.Response[v1.GetServerTokenResponse], error)
	// RegisterServer registers a server and maps it to a regional gateway
	// Called during server provisioning to establish BMC access routing
	RegisterServer(context.Context, *connect.Request[v1.RegisterServerRequest]) (*connect.Response[v1.RegisterServerResponse], error)
	// GetServerLocation resolves which gateway handles a specific server
	// Used by CLI and other clients to route server requests correctly
	GetServerLocation(context.Context, *connect.Request[v1.GetServerLocationRequest]) (*connect.Response[v1.GetServerLocationResponse], error)
	// RegisterGateway allows gateways to register and announce their capabilities
	// Establishes which datacenters each gateway can serve
	RegisterGateway(context.Context, *connect.Request[v1.RegisterGatewayRequest]) (*connect.Response[v1.RegisterGatewayResponse], error)
	// ListGateways returns available gateways, optionally filtered by region
	// Used for gateway discovery and load balancing
	ListGateways(context.Context, *connect.Request[v1.ListGatewaysRequest]) (*connect.Response[v1.ListGatewaysResponse], error)
	// GetSystemStatus returns overall system status including all gateways and their servers
	// Admin endpoint for monitoring and debugging
	GetSystemStatus(context.Context, *connect.Request[v1.GetSystemStatusRequest]) (*connect.Response[v1.GetSystemStatusResponse], error)
	// GetServer retrieves detailed information about a specific server
	// Validates customer access and returns server metadata and BMC endpoint
	GetServer(context.Context, *connect.Request[v1.GetServerRequest]) (*connect.Response[v1.GetServerResponse], error)
	// ListServers returns all servers accessible by the authenticated customer
	// Supports pagination for large server inventories
	ListServers(context.Context, *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error)
	// ReportAvailableEndpoints allows gateways to report BMC endpoints they can proxy
	// This establishes the BMC endpoint to gateway mapping for routing decisions
	ReportAvailableEndpoints(context.Context, *connect.Request[v1.ReportAvailableEndpointsRequest]) (*connect.Response[v1.ReportAvailableEndpointsResponse], error)
}

// NewBMCManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBMCManagerServiceHandler(svc BMCManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bMCManagerServiceMethods := v1.File_manager_v1_manager_proto.Services().ByName("BMCManagerService").Methods()
	bMCManagerServiceAuthenticateHandler := connect.NewUnaryHandler(
		BMCManagerServiceAuthenticateProcedure,
		svc.Authenticate,
		connect.WithSchema(bMCManagerServiceMethods.ByName("Authenticate")),
		connect.WithHandlerOptions(opts...),
	)
	bMCManagerServiceRefreshTokenHandler := connect.NewUnaryHandler(
		BMCManagerServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(bMCManagerServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	bMCManagerServiceGetServerTokenHandler := connect.NewUnaryHandler(
		BMCManagerServiceGetServerTokenProcedure,
		svc.GetServerToken,
		connect.WithSchema(bMCManagerServiceMethods.ByName("GetServerToken")),
		connect.WithHandlerOptions(opts...),
	)
	bMCManagerServiceRegisterServerHandler := connect.NewUnaryHandler(
		BMCManagerServiceRegisterServerProcedure,
		svc.RegisterServer,
		connect.WithSchema(bMCManagerServiceMethods.ByName("RegisterServer")),
		connect.WithHandlerOptions(opts...),
	)
	bMCManagerServiceGetServerLocationHandler := connect.NewUnaryHandler(
		BMCManagerServiceGetServerLocationProcedure,
		svc.GetServerLocation,
		connect.WithSchema(bMCManagerServiceMethods.ByName("GetServerLocation")),
		connect.WithHandlerOptions(opts...),
	)
	bMCManagerServiceRegisterGatewayHandler := connect.NewUnaryHandler(
		BMCManagerServiceRegisterGatewayProcedure,
		svc.RegisterGateway,
		connect.WithSchema(bMCManagerServiceMethods.ByName("RegisterGateway")),
		connect.WithHandlerOptions(opts...),
	)
	bMCManagerServiceListGatewaysHandler := connect.NewUnaryHandler(
		BMCManagerServiceListGatewaysProcedure,
		svc.ListGateways,
		connect.WithSchema(bMCManagerServiceMethods.ByName("ListGateways")),
		connect.WithHandlerOptions(opts...),
	)
	bMCManagerServiceGetSystemStatusHandler := connect.NewUnaryHandler(
		BMCManagerServiceGetSystemStatusProcedure,
		svc.GetSystemStatus,
		connect.WithSchema(bMCManagerServiceMethods.ByName("GetSystemStatus")),
		connect.WithHandlerOptions(opts...),
	)
	bMCManagerServiceGetServerHandler := connect.NewUnaryHandler(
		BMCManagerServiceGetServerProcedure,
		svc.GetServer,
		connect.WithSchema(bMCManagerServiceMethods.ByName("GetServer")),
		connect.WithHandlerOptions(opts...),
	)
	bMCManagerServiceListServersHandler := connect.NewUnaryHandler(
		BMCManagerServiceListServersProcedure,
		svc.ListServers,
		connect.WithSchema(bMCManagerServiceMethods.ByName("ListServers")),
		connect.WithHandlerOptions(opts...),
	)
	bMCManagerServiceReportAvailableEndpointsHandler := connect.NewUnaryHandler(
		BMCManagerServiceReportAvailableEndpointsProcedure,
		svc.ReportAvailableEndpoints,
		connect.WithSchema(bMCManagerServiceMethods.ByName("ReportAvailableEndpoints")),
		connect.WithHandlerOptions(opts...),
	)
	return "/manager.v1.BMCManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BMCManagerServiceAuthenticateProcedure:
			bMCManagerServiceAuthenticateHandler.ServeHTTP(w, r)
		case BMCManagerServiceRefreshTokenProcedure:
			bMCManagerServiceRefreshTokenHandler.ServeHTTP(w, r)
		case BMCManagerServiceGetServerTokenProcedure:
			bMCManagerServiceGetServerTokenHandler.ServeHTTP(w, r)
		case BMCManagerServiceRegisterServerProcedure:
			bMCManagerServiceRegisterServerHandler.ServeHTTP(w, r)
		case BMCManagerServiceGetServerLocationProcedure:
			bMCManagerServiceGetServerLocationHandler.ServeHTTP(w, r)
		case BMCManagerServiceRegisterGatewayProcedure:
			bMCManagerServiceRegisterGatewayHandler.ServeHTTP(w, r)
		case BMCManagerServiceListGatewaysProcedure:
			bMCManagerServiceListGatewaysHandler.ServeHTTP(w, r)
		case BMCManagerServiceGetSystemStatusProcedure:
			bMCManagerServiceGetSystemStatusHandler.ServeHTTP(w, r)
		case BMCManagerServiceGetServerProcedure:
			bMCManagerServiceGetServerHandler.ServeHTTP(w, r)
		case BMCManagerServiceListServersProcedure:
			bMCManagerServiceListServersHandler.ServeHTTP(w, r)
		case BMCManagerServiceReportAvailableEndpointsProcedure:
			bMCManagerServiceReportAvailableEndpointsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBMCManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBMCManagerServiceHandler struct{}

func (UnimplementedBMCManagerServiceHandler) Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.Authenticate is not implemented"))
}

func (UnimplementedBMCManagerServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.RefreshToken is not implemented"))
}

func (UnimplementedBMCManagerServiceHandler) GetServerToken(context.Context, *connect.Request[v1.GetServerTokenRequest]) (*connect.Response[v1.GetServerTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.GetServerToken is not implemented"))
}

func (UnimplementedBMCManagerServiceHandler) RegisterServer(context.Context, *connect.Request[v1.RegisterServerRequest]) (*connect.Response[v1.RegisterServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.RegisterServer is not implemented"))
}

func (UnimplementedBMCManagerServiceHandler) GetServerLocation(context.Context, *connect.Request[v1.GetServerLocationRequest]) (*connect.Response[v1.GetServerLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.GetServerLocation is not implemented"))
}

func (UnimplementedBMCManagerServiceHandler) RegisterGateway(context.Context, *connect.Request[v1.RegisterGatewayRequest]) (*connect.Response[v1.RegisterGatewayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.RegisterGateway is not implemented"))
}

func (UnimplementedBMCManagerServiceHandler) ListGateways(context.Context, *connect.Request[v1.ListGatewaysRequest]) (*connect.Response[v1.ListGatewaysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.ListGateways is not implemented"))
}

func (UnimplementedBMCManagerServiceHandler) GetSystemStatus(context.Context, *connect.Request[v1.GetSystemStatusRequest]) (*connect.Response[v1.GetSystemStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.GetSystemStatus is not implemented"))
}

func (UnimplementedBMCManagerServiceHandler) GetServer(context.Context, *connect.Request[v1.GetServerRequest]) (*connect.Response[v1.GetServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.GetServer is not implemented"))
}

func (UnimplementedBMCManagerServiceHandler) ListServers(context.Context, *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.ListServers is not implemented"))
}

func (UnimplementedBMCManagerServiceHandler) ReportAvailableEndpoints(context.Context, *connect.Request[v1.ReportAvailableEndpointsRequest]) (*connect.Response[v1.ReportAvailableEndpointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("manager.v1.BMCManagerService.ReportAvailableEndpoints is not implemented"))
}
