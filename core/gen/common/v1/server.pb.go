// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: common/v1/server.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BMCType specifies the type of BMC interface available on a server
type BMCType int32

const (
	BMCType_BMC_UNSPECIFIED BMCType = 0 // Unknown or not specified BMC type
	BMCType_BMC_IPMI        BMCType = 1 // Traditional IPMI interface (typically port 623)
	BMCType_BMC_REDFISH     BMCType = 2 // Modern Redfish REST API interface (typically HTTPS)
)

// Enum value maps for BMCType.
var (
	BMCType_name = map[int32]string{
		0: "BMC_UNSPECIFIED",
		1: "BMC_IPMI",
		2: "BMC_REDFISH",
	}
	BMCType_value = map[string]int32{
		"BMC_UNSPECIFIED": 0,
		"BMC_IPMI":        1,
		"BMC_REDFISH":     2,
	}
)

func (x BMCType) Enum() *BMCType {
	p := new(BMCType)
	*p = x
	return p
}

func (x BMCType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BMCType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_server_proto_enumTypes[0].Descriptor()
}

func (BMCType) Type() protoreflect.EnumType {
	return &file_common_v1_server_proto_enumTypes[0]
}

func (x BMCType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BMCType.Descriptor instead.
func (BMCType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_server_proto_rawDescGZIP(), []int{0}
}

// SOLType specifies the type of Serial-over-LAN endpoint
type SOLType int32

const (
	SOLType_SOL_UNSPECIFIED    SOLType = 0
	SOLType_SOL_IPMI           SOLType = 1 // IPMI Serial-over-LAN
	SOLType_SOL_REDFISH_SERIAL SOLType = 2 // Redfish serial console
)

// Enum value maps for SOLType.
var (
	SOLType_name = map[int32]string{
		0: "SOL_UNSPECIFIED",
		1: "SOL_IPMI",
		2: "SOL_REDFISH_SERIAL",
	}
	SOLType_value = map[string]int32{
		"SOL_UNSPECIFIED":    0,
		"SOL_IPMI":           1,
		"SOL_REDFISH_SERIAL": 2,
	}
)

func (x SOLType) Enum() *SOLType {
	p := new(SOLType)
	*p = x
	return p
}

func (x SOLType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SOLType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_server_proto_enumTypes[1].Descriptor()
}

func (SOLType) Type() protoreflect.EnumType {
	return &file_common_v1_server_proto_enumTypes[1]
}

func (x SOLType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SOLType.Descriptor instead.
func (SOLType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_server_proto_rawDescGZIP(), []int{1}
}

// VNCType specifies the type of VNC transport
type VNCType int32

const (
	VNCType_VNC_UNSPECIFIED VNCType = 0
	VNCType_VNC_NATIVE      VNCType = 1 // Native VNC TCP (port 5900)
	VNCType_VNC_WEBSOCKET   VNCType = 2 // WebSocket-wrapped VNC/RFB
)

// Enum value maps for VNCType.
var (
	VNCType_name = map[int32]string{
		0: "VNC_UNSPECIFIED",
		1: "VNC_NATIVE",
		2: "VNC_WEBSOCKET",
	}
	VNCType_value = map[string]int32{
		"VNC_UNSPECIFIED": 0,
		"VNC_NATIVE":      1,
		"VNC_WEBSOCKET":   2,
	}
)

func (x VNCType) Enum() *VNCType {
	p := new(VNCType)
	*p = x
	return p
}

func (x VNCType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VNCType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_server_proto_enumTypes[2].Descriptor()
}

func (VNCType) Type() protoreflect.EnumType {
	return &file_common_v1_server_proto_enumTypes[2]
}

func (x VNCType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VNCType.Descriptor instead.
func (VNCType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_server_proto_rawDescGZIP(), []int{2}
}

// BMC Control API endpoint (IPMI/Redfish)
type BMCControlEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint     string     `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                 // BMC API endpoint (e.g., "192.168.1.100:623", "https://192.168.1.100")
	Type         BMCType    `protobuf:"varint,2,opt,name=type,proto3,enum=common.v1.BMCType" json:"type,omitempty"` // IPMI or Redfish
	Username     string     `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                 // BMC credentials
	Password     string     `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                 // BMC credentials
	Tls          *TLSConfig `protobuf:"bytes,5,opt,name=tls,proto3" json:"tls,omitempty"`                           // TLS configuration for Redfish
	Capabilities []string   `protobuf:"bytes,6,rep,name=capabilities,proto3" json:"capabilities,omitempty"`         // Control capabilities (power, sensors, sel, etc.)
}

func (x *BMCControlEndpoint) Reset() {
	*x = BMCControlEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMCControlEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMCControlEndpoint) ProtoMessage() {}

func (x *BMCControlEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMCControlEndpoint.ProtoReflect.Descriptor instead.
func (*BMCControlEndpoint) Descriptor() ([]byte, []int) {
	return file_common_v1_server_proto_rawDescGZIP(), []int{0}
}

func (x *BMCControlEndpoint) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BMCControlEndpoint) GetType() BMCType {
	if x != nil {
		return x.Type
	}
	return BMCType_BMC_UNSPECIFIED
}

func (x *BMCControlEndpoint) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BMCControlEndpoint) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BMCControlEndpoint) GetTls() *TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *BMCControlEndpoint) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// Serial-over-LAN console endpoint
type SOLEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     SOLType    `protobuf:"varint,1,opt,name=type,proto3,enum=common.v1.SOLType" json:"type,omitempty"` // IPMI SOL or Redfish serial console
	Endpoint string     `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                 // SOL-specific endpoint (may differ from control)
	Username string     `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                 // SOL credentials (may differ from BMC)
	Password string     `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                 // SOL credentials
	Config   *SOLConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`                     // SOL-specific configuration
}

func (x *SOLEndpoint) Reset() {
	*x = SOLEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SOLEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SOLEndpoint) ProtoMessage() {}

func (x *SOLEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SOLEndpoint.ProtoReflect.Descriptor instead.
func (*SOLEndpoint) Descriptor() ([]byte, []int) {
	return file_common_v1_server_proto_rawDescGZIP(), []int{1}
}

func (x *SOLEndpoint) GetType() SOLType {
	if x != nil {
		return x.Type
	}
	return SOLType_SOL_UNSPECIFIED
}

func (x *SOLEndpoint) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *SOLEndpoint) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SOLEndpoint) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SOLEndpoint) GetConfig() *SOLConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// VNC/KVM graphical console endpoint
type VNCEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     VNCType    `protobuf:"varint,1,opt,name=type,proto3,enum=common.v1.VNCType" json:"type,omitempty"` // BMC native VNC, noVNC proxy, or external KVM
	Endpoint string     `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                 // VNC endpoint (websocket, TCP, or HTTP)
	Username string     `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                 // VNC credentials
	Password string     `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                 // VNC credentials
	Config   *VNCConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`                     // VNC-specific configuration
}

func (x *VNCEndpoint) Reset() {
	*x = VNCEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNCEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNCEndpoint) ProtoMessage() {}

func (x *VNCEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNCEndpoint.ProtoReflect.Descriptor instead.
func (*VNCEndpoint) Descriptor() ([]byte, []int) {
	return file_common_v1_server_proto_rawDescGZIP(), []int{2}
}

func (x *VNCEndpoint) GetType() VNCType {
	if x != nil {
		return x.Type
	}
	return VNCType_VNC_UNSPECIFIED
}

func (x *VNCEndpoint) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *VNCEndpoint) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *VNCEndpoint) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *VNCEndpoint) GetConfig() *VNCConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// TLSConfig holds TLS-specific configuration for BMC connections
type TLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled            bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	InsecureSkipVerify bool   `protobuf:"varint,2,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	CaCert             string `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"` // Optional CA certificate
}

func (x *TLSConfig) Reset() {
	*x = TLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfig) ProtoMessage() {}

func (x *TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfig.ProtoReflect.Descriptor instead.
func (*TLSConfig) Descriptor() ([]byte, []int) {
	return file_common_v1_server_proto_rawDescGZIP(), []int{3}
}

func (x *TLSConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TLSConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *TLSConfig) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

// SOLConfig holds SOL-specific configuration
type SOLConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaudRate       int32  `protobuf:"varint,1,opt,name=baud_rate,json=baudRate,proto3" json:"baud_rate,omitempty"`                   // Serial baud rate (default: 115200)
	FlowControl    string `protobuf:"bytes,2,opt,name=flow_control,json=flowControl,proto3" json:"flow_control,omitempty"`           // Flow control settings
	TimeoutSeconds int32  `protobuf:"varint,3,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"` // SOL session timeout
}

func (x *SOLConfig) Reset() {
	*x = SOLConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SOLConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SOLConfig) ProtoMessage() {}

func (x *SOLConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SOLConfig.ProtoReflect.Descriptor instead.
func (*SOLConfig) Descriptor() ([]byte, []int) {
	return file_common_v1_server_proto_rawDescGZIP(), []int{4}
}

func (x *SOLConfig) GetBaudRate() int32 {
	if x != nil {
		return x.BaudRate
	}
	return 0
}

func (x *SOLConfig) GetFlowControl() string {
	if x != nil {
		return x.FlowControl
	}
	return ""
}

func (x *SOLConfig) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

// VNCConfig holds VNC-specific configuration
type VNCConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`                  // "websocket", "tcp", "http"
	Path     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                          // URL path for HTTP/WebSocket
	Display  int32  `protobuf:"varint,3,opt,name=display,proto3" json:"display,omitempty"`                   // VNC display number
	ReadOnly bool   `protobuf:"varint,4,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"` // Read-only access
}

func (x *VNCConfig) Reset() {
	*x = VNCConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNCConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNCConfig) ProtoMessage() {}

func (x *VNCConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNCConfig.ProtoReflect.Descriptor instead.
func (*VNCConfig) Descriptor() ([]byte, []int) {
	return file_common_v1_server_proto_rawDescGZIP(), []int{5}
}

func (x *VNCConfig) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *VNCConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VNCConfig) GetDisplay() int32 {
	if x != nil {
		return x.Display
	}
	return 0
}

func (x *VNCConfig) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

var File_common_v1_server_proto protoreflect.FileDescriptor

var file_common_v1_server_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x42, 0x4d, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x4d, 0x43, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x53, 0x4f, 0x4c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4f, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4f, 0x4c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb7, 0x01, 0x0a,
	0x0b, 0x56, 0x4e, 0x43, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4e, 0x43, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4e, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x70, 0x0a, 0x09, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x22, 0x74, 0x0a, 0x09, 0x53, 0x4f, 0x4c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x75, 0x64, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x75, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x72,
	0x0a, 0x09, 0x56, 0x4e, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x2a, 0x3d, 0x0a, 0x07, 0x42, 0x4d, 0x43, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x4d, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4d, 0x43, 0x5f, 0x49, 0x50, 0x4d, 0x49, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4d, 0x43, 0x5f, 0x52, 0x45, 0x44, 0x46, 0x49, 0x53, 0x48, 0x10,
	0x02, 0x2a, 0x44, 0x0a, 0x07, 0x53, 0x4f, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x4d, 0x49, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x44, 0x46, 0x49, 0x53, 0x48, 0x5f, 0x53,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x41, 0x0a, 0x07, 0x56, 0x4e, 0x43, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4e, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x4e, 0x43, 0x5f, 0x4e,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x4e, 0x43, 0x5f, 0x57,
	0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x42, 0x1d, 0x5a, 0x1b, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_common_v1_server_proto_rawDescOnce sync.Once
	file_common_v1_server_proto_rawDescData = file_common_v1_server_proto_rawDesc
)

func file_common_v1_server_proto_rawDescGZIP() []byte {
	file_common_v1_server_proto_rawDescOnce.Do(func() {
		file_common_v1_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_v1_server_proto_rawDescData)
	})
	return file_common_v1_server_proto_rawDescData
}

var file_common_v1_server_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_v1_server_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_common_v1_server_proto_goTypes = []interface{}{
	(BMCType)(0),               // 0: common.v1.BMCType
	(SOLType)(0),               // 1: common.v1.SOLType
	(VNCType)(0),               // 2: common.v1.VNCType
	(*BMCControlEndpoint)(nil), // 3: common.v1.BMCControlEndpoint
	(*SOLEndpoint)(nil),        // 4: common.v1.SOLEndpoint
	(*VNCEndpoint)(nil),        // 5: common.v1.VNCEndpoint
	(*TLSConfig)(nil),          // 6: common.v1.TLSConfig
	(*SOLConfig)(nil),          // 7: common.v1.SOLConfig
	(*VNCConfig)(nil),          // 8: common.v1.VNCConfig
}
var file_common_v1_server_proto_depIdxs = []int32{
	0, // 0: common.v1.BMCControlEndpoint.type:type_name -> common.v1.BMCType
	6, // 1: common.v1.BMCControlEndpoint.tls:type_name -> common.v1.TLSConfig
	1, // 2: common.v1.SOLEndpoint.type:type_name -> common.v1.SOLType
	7, // 3: common.v1.SOLEndpoint.config:type_name -> common.v1.SOLConfig
	2, // 4: common.v1.VNCEndpoint.type:type_name -> common.v1.VNCType
	8, // 5: common.v1.VNCEndpoint.config:type_name -> common.v1.VNCConfig
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_common_v1_server_proto_init() }
func file_common_v1_server_proto_init() {
	if File_common_v1_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_v1_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMCControlEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SOLEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNCEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SOLConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNCConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_v1_server_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v1_server_proto_goTypes,
		DependencyIndexes: file_common_v1_server_proto_depIdxs,
		EnumInfos:         file_common_v1_server_proto_enumTypes,
		MessageInfos:      file_common_v1_server_proto_msgTypes,
	}.Build()
	File_common_v1_server_proto = out.File
	file_common_v1_server_proto_rawDesc = nil
	file_common_v1_server_proto_goTypes = nil
	file_common_v1_server_proto_depIdxs = nil
}
